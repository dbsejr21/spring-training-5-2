<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<context:component-scan base-package="com.multicampus.biz"/>

	<aop:aspectj-autoproxy/>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="dataSource" 
	      class="org.apache.commons.dbcp.BasicDataSource"
	      destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="hr"/>
		<property name="password" value="hr"/>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="allPointcut" 
		              expression="execution(* com.multicampus.biz..*Impl.*(..))"/>
		<aop:advisor pointcut-ref="allPointcut" advice-ref="txAdvice"/>
	</aop:config>

	<!-- Spring과 iBatis 연동 설정 -->
	<bean id="sqlMapClient"	class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
	</bean>

	<bean id="sqlMapClientTemplate"	class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient"/>
	</bean>
	
	<!-- Spring과 Hibernate 연동 설정 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="annotatedClasses">
			<list>
				<value>com.multicampus.biz.board.BoardVO</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate_dialect">
				org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- Advice(횡단관점) 클래스 등록 
	<bean id="log" class="com.multicampus.biz.common.LogAdvice"/>
	-->
	
	<!-- AOP 설정 
	<aop:config>
		<aop:pointcut id="allPointcut" 
		              expression="execution(* com.multicampus.biz..*Impl.*(..))"/>
		<aop:pointcut id="getPointcut" 
		              expression="execution(* com.multicampus.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="log">
			<aop:before pointcut-ref="allPointcut" 
			            method="printLog"/>
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" 
			            method="afterLog"
			            returning="returnObj"/>
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" 
			            method="exceptionLog"
			            throwing="exceptObj"/>
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" 
			            method="aroundLog"/>
		</aop:aspect>
	</aop:config>
-->
<!--  
	<bean id="userService" class="com.multicampus.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>

	<bean id="userDAO" class="com.multicampus.biz.user.impl.UserDAO"/>
	
	
	<bean id="boardService" class="com.multicampus.biz.board.impl.BoardServiceImpl">
		<property name="boardDAO" ref="boardDAO"/>
	</bean>

	<bean id="boardDAO" class="com.multicampus.biz.board.impl.BoardDAO"/>

	<context:component-scan base-package="polymorphism3"/>
	
	<bean id="tv" class="polymorphism3.LgTV">
		<property name="speaker" ref="sony"/>
	</bean>
		
	<bean id="sony" class="polymorphism3.SonySpeaker"/>
	
	<bean id="apple" class="polymorphism3.AppleSpeaker"/>
-->
</beans>











